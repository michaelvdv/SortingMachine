interface PP2IF
{
	in void startUp();
	in void startStop();
	in void abort();
	
	out void error00();		//Pusher Disconnected
	out void error01();		//PusherBtn Disconnected
	out void error02();		//Disc stuck at tube
	out void error03();		//LED01 malfunction
	out void error04();		//LED02 malfunction
	out void error05();		//Photocell 1 malfunction
	out void error06();		//Conveyor Belt Disconnected
	out void error07();		//Disc stuck in front of Photocell 1 or 2
	out void error08();		//Bucket Mechanism Malfunction
	out void error09();		//BucketBtn Disconnected
	out void pause();		
	out void unpause();
	out void aborted();
	out void finished();
	
	behaviour
	{
		enum State {Off, Idle, Running, Aborted};
		State state = State.Off;
		
		[state.Running]
		{
			on optional:		{error00; error01; error02; error03; error04;
								error05; error06; error07; error08; error09;}
		}
		
		on startUp:{
			[state.Off]			{state = State.Idle;}
			[otherwise]			illegal;
		}		
		
		on startStop:
		{
			[state.Idle]		{state = State.Running;}
			[state.Running]		{state = State.Idle;}
			[state.Aborted]		{state = State.Idle;}
			[otherwise]			illegal;
		}
		on abort:
		{
			[state.Off]			illegal;
			[state.Aborted]		{}
			[otherwise]			{state = State.Aborted;}
		}		
	}
}

interface SensorIF
{
	in void enable();
	in void disable();
	
	out void triggered();
	out void timeout();
	out void systemCheckDone();
	
	behaviour
	{
		enum State { Disabled, Enabled, Triggered};
		State state = State.Disabled;
		
		[state.Disabled]
		{
			on enable:			state = State.Enabled;
			on disable:			{}
		}
		[state.Enabled]
		{
			on enable:			illegal;
			on disable:			state = State.Disabled;
			on optional:		{triggered; state = State.Triggered;}
			on optional:		{systemCheckDone; state = State.Disabled;}
			on inevitable:		timeout;
		}
		[state.Triggered]		//Sensor output = 0!
		{
			on enable:			illegal;
			on disable:			state = State.Disabled;
			on inevitable:		timeout;
		}
		
	}
}

interface ColourDetIF
{
	in void enable();
	in void disable();
	
	out void white();
	out void black();
	out void timeout();
	
	behaviour
	{
		enum State { Disabled, Enabled, Triggered };
		State state = State.Disabled;
		
		[state.Disabled]
		{
			on enable:			state = State.Enabled;
			on disable:			{}
		}
		[state.Enabled]
		{
			on enable:			illegal;
			on disable:			state = State.Disabled;
			on optional:		{black;state = State.Triggered;}
			on optional:		{white;state = State.Triggered;}
			
		}
		[state.Triggered]
		{
			on enable:			illegal;
			on disable:			{state = State.Disabled;}
			on inevitable:		{timeout;}
		}
	}
}

interface MotorIF
{
	in void turnCW();
	in void turnCCW();
	in void disable();
	
	out void turningCW();
	out void turningCCW();
	out void disabled();
	
	behaviour
	{
		enum State { Disabled, TurnCW, TurnCCW, Disabling};
		State state = State.Disabled;
		
		on turnCW:
		{
			[state.Disabled]	{turningCW;state = State.TurnCW;}
			[otherwise]			{illegal;}
		}
		on turnCCW:
		{
			[state.Disabled]	{turningCCW;state = State.TurnCCW;}
			[otherwise]			{illegal;}
		}
		on disable:
		{
			[state.TurnCW]		{disabled; state = State.Disabled;}
			[state.TurnCCW]		{disabled; state = State.Disabled;}
			[otherwise]			{}
		}
	}
}

interface ButtonIF {

	in void enable();
	in void disable();
	
	out void pressing();
	out void notPressing();
	out void timeoutP();
	out void timeoutNP();
	
	behaviour {
				
		enum State {Off, Pressed, NotPressed};
		State state = State.Off;
		
		
		[state.Off] {
			on enable:			state = State.NotPressed;
			on disable:		 	{}
		}
		
		[state.Pressed] {
			on inevitable:		timeoutP;
			on optional:		{notPressing; state = State.NotPressed;}
			on disable:			state = State.Off;
			on enable:			illegal;			
		}
		
		[state.NotPressed] {
			on inevitable:		timeoutNP;
			on optional:		{pressing; state = State.Pressed;}
			on enable:			illegal;
			on disable:			state = State.Off;
		}
	}	
}

component BucketSort
{
	provides PP2IF pp2;
	requires SensorIF sensor1;
	requires SensorIF sensor2;
	requires ColourDetIF colourDet1;
	requires ColourDetIF colourDet2;
	requires MotorIF motorPush;
	requires MotorIF motorConveyor;
	requires MotorIF motorBucket;
	requires ButtonIF buttonPush;
	requires ButtonIF buttonBucket;
	
	behaviour {
		
		enum State {Off, SystemCheck, Idle, PushingButtonPressed, 
			PushingButtonNotPressed, Scanning1, MoveWhite, 
			MoveBlack, IdleWhite, IdleBlack, MoveWhiteBack,
			MoveBlackBack, Aborted};
		State state = State.Off;
		bool paused = true;
		
		[state.Off] {
			on pp2.startUp():				{sensor1.enable(); sensor2.enable();  state = State.SystemCheck;}				
			on pp2.startStop():				{}
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor1.systemCheckDone():	illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on sensor2.systemCheckDone():	illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}
		
		[state.SystemCheck] {
			on pp2.startUp():				{}				
			on pp2.startStop():				{}
			on sensor1.triggered():			{pp2.error03(); sensor1.disable(); sensor2.disable(); state = State.Aborted;}
			on sensor1.timeout():			{}
			on sensor1.systemCheckDone():	{sensor1.disable(); sensor2.disable(); state = State.Idle;}
			on sensor2.triggered():			{pp2.error04(); sensor1.disable(); sensor2.disable(); state = State.Aborted;}
			on sensor2.timeout():			{}
			on sensor2.systemCheckDone():	{sensor1.disable(); sensor2.disable(); state = State.Idle;}
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		{}
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.disabled():	{}
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		{}
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;			
		}	
		
		[state.Idle] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				{
				[paused]				{sensor1.enable(); sensor2.enable(); 
										buttonPush.enable(); 
										motorPush.turnCW();  
										state = State.PushingButtonNotPressed;}
										
				[otherwise]				{paused=true;}
				
			}
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor1.systemCheckDone():	illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on sensor2.systemCheckDone():	illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		{}
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	{}
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		{}
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
	
		[state.PushingButtonNotPressed] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			{}
			on sensor1.timeout():			{pp2.error00(); sensor1.disable(); sensor2.disable(); buttonPush.disable(); motorPush.disable(); state = State.Aborted;}
			on sensor1.systemCheckDone():	{}
			on sensor2.triggered():			{}
			on sensor2.timeout():			{pp2.error01(); sensor1.disable(); sensor2.disable(); buttonPush.disable(); motorPush.disable(); state = State.Aborted;}
			on sensor2.systemCheckDone():	{}
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		{}
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		{}
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		{}
			on buttonPush.pressing():		{state = State.PushingButtonPressed;}
			on buttonPush.notPressing():	{}
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		{pp2.error01(); sensor1.disable(); sensor2.disable(); buttonPush.disable(); motorPush.disable(); state = State.Aborted;}
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.PushingButtonPressed] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			{}
			on sensor1.timeout():			{pp2.error00(); sensor1.disable(); sensor2.disable(); buttonPush.disable(); motorPush.disable(); state = State.Aborted;}
			on sensor1.systemCheckDone():	{}
			on sensor2.triggered():			{}
			on sensor2.timeout():			{pp2.error01(); sensor1.disable(); sensor2.disable(); buttonPush.disable(); motorPush.disable(); state = State.Aborted;}
			on sensor2.systemCheckDone():	{}
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		{}
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		{}
			on motorConveyor.turningCW():	{}
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		{}
			on buttonPush.pressing():		{}
			on buttonPush.notPressing():	{colourDet1.enable(); colourDet2.enable(); motorPush.disable(); motorConveyor.turnCW(); buttonPush.disable(); state = State.Scanning1;}
			on buttonPush.timeoutP():		{pp2.error00(); sensor1.disable(); sensor2.disable(); buttonPush.disable(); motorPush.disable(); state = State.Aborted;}
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
	
		[state.Scanning1] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			{}
			on sensor1.timeout():			{pp2.error00(); sensor1.disable(); sensor2.disable(); colourDet1.disable(); colourDet2.disable(); motorConveyor.disable(); state = State.Aborted;}
			on sensor1.systemCheckDone():	{}
			on sensor2.triggered():			{}
			on sensor2.timeout():			{pp2.error06(); sensor1.disable(); sensor2.disable(); colourDet1.disable(); colourDet2.disable(); motorConveyor.disable(); state = State.Aborted;}
			on sensor2.systemCheckDone():	{}
			on colourDet1.white():			{motorBucket.turnCW(); buttonBucket.enable(); colourDet1.disable(); sensor1.disable(); state = State.MoveWhite;}
			on colourDet1.black():			{motorBucket.turnCCW(); buttonBucket.enable(); colourDet1.disable(); sensor1.disable(); state = State.MoveBlack;}
			//For the JAVA code: the scanning of the black disk is of course done by a timer instead of a signal.
			on colourDet1.timeout():		{pp2.error07(); sensor1.disable(); sensor2.disable(); colourDet1.disable(); colourDet2.disable(); motorConveyor.disable(); state = State.Aborted;}
			on colourDet2.white():			{}
			on colourDet2.black():			{}
			//See above comment
			on colourDet2.timeout():		{}
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		{}
			on motorConveyor.turningCW():	{}
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		{}
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.MoveWhite] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			{}
			on sensor1.timeout():			{pp2.error00(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on sensor1.systemCheckDone():	{}
			on sensor2.triggered():			{}
			on sensor2.timeout():			{pp2.error06(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on sensor2.systemCheckDone():	{}
			on colourDet1.white():			{}
			on colourDet1.black():			{}
			on colourDet1.timeout():		{pp2.error07(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on colourDet2.white():			{}													//This is the confirmation of the disk colour.
			on colourDet2.black():			{pp2.error05(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on colourDet2.timeout():		{pp2.error07(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		{}
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		{sensor2.disable(); colourDet2.disable(); motorBucket.disable(); state = State.IdleWhite;}
			on buttonBucket.notPressing():	{}	
			on buttonBucket.timeoutP():		{}
			on buttonBucket.timeoutNP():	{pp2.error08(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable();  state = State.Aborted;}			
			//or error09? How do we see the difference between the two?
			//Saying the bucket mechanism is failing so far is best, since we do not know more.
		}	
		
		[state.MoveBlack] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			{pp2.error00(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on sensor1.systemCheckDone():	{}
			on sensor2.triggered():			{}
			on sensor2.timeout():			{pp2.error06(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on sensor2.systemCheckDone():	{}
			on colourDet1.white():			{}
			on colourDet1.black():			{}
			on colourDet1.timeout():		{pp2.error07(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on colourDet2.white():			{pp2.error05(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on colourDet2.black():			{}
			on colourDet2.timeout():		{pp2.error07(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	{}
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		{sensor2.disable(); colourDet2.disable(); motorBucket.disable(); state = State.IdleBlack;}
			on buttonBucket.notPressing():	{}	
			on buttonBucket.timeoutP():		{}
			on buttonBucket.timeoutNP():	{pp2.error08(); sensor2.disable(); colourDet2.disable(); motorConveyor.disable(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}		
			//see comment in MoveWhite
		}	
		
		[state.IdleWhite] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor1.systemCheckDone():	illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on sensor2.systemCheckDone():	illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	{}
			on motorBucket.disabled():		{}
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		{}
			on buttonBucket.notPressing():	{pp2.error09(); motorBucket.disable(); motorConveyor.disable(); buttonBucket.disable(); state = State.Aborted;}	
			on buttonBucket.timeoutP():		{motorBucket.turnCCW(); motorConveyor.disable(); state = State.MoveWhiteBack;}
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.IdleBlack] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor1.systemCheckDone():	illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on sensor2.systemCheckDone():	illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	{}
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		{}
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	{}
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		{}
			on buttonBucket.notPressing():	{pp2.error09(); motorBucket.disable(); motorConveyor.disable(); buttonBucket.disable(); state = State.Aborted;}	
			on buttonBucket.timeoutP():		{motorBucket.turnCW(); motorConveyor.disable(); state = State.MoveBlackBack;}
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.MoveWhiteBack] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor1.systemCheckDone():	illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on sensor2.systemCheckDone():	illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	{}
			on motorBucket.turningCW():		{}
			on motorBucket.turningCCW():	{pp2.error08(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	{}
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		{}
			on buttonBucket.notPressing():	{motorBucket.disable(); motorPush.turnCW(); buttonBucket.disable(); state = State.PushingButtonNotPressed;}	
			on buttonBucket.timeoutP():		{pp2.error08(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on buttonBucket.timeoutNP():	{pp2.error09(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
		}	
		
		[state.MoveBlackBack] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor1.systemCheckDone():	illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on sensor2.systemCheckDone():	illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	{}
			on motorBucket.turningCW():		{}
			on motorBucket.turningCCW():	{pp2.error08(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		{}
			on buttonBucket.notPressing():	{motorBucket.disable(); motorPush.turnCW(); buttonBucket.disable(); state = State.PushingButtonNotPressed;}	
			on buttonBucket.timeoutP():		{pp2.error08(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
			on buttonBucket.timeoutNP():	{pp2.error09(); motorBucket.disable(); buttonBucket.disable(); state = State.Aborted;}
		}	
		
		//This state is a variation of the off state. Here the system is still running and not disconnected. 
		[state.Aborted] {
			on pp2.startUp():				{}		
			on pp2.startStop():				{sensor1.enable(); sensor2.enable();  state = State.SystemCheck;}
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor1.systemCheckDone():	illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on sensor2.systemCheckDone():	illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		{}
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.turningCCW():	illegal;
			on motorConveyor.disabled():	{}
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		{}
			on buttonPush.pressing():		{}
			on buttonPush.notPressing():	{}
			on buttonPush.timeoutP():		{}
			on buttonPush.timeoutNP():		{}
			on buttonBucket.pressing():		{}
			on buttonBucket.notPressing():	{}
			on buttonBucket.timeoutP():		{}
			on buttonBucket.timeoutNP():	{}
		}	
				
		on pp2.abort():
		{
			[state.Off]					illegal;
			[state.Aborted]				{}
			[otherwise]					{sensor1.disable(); sensor2.disable(); 
										colourDet1.disable(); colourDet2.disable(); buttonPush.disable(); buttonBucket.disable();
										motorPush.disable(); motorConveyor.disable(); motorBucket.disable(); 
										state = State.Aborted;
			}
		}
		
		on motorConveyor.turningCCW():{	
			illegal;
		}
		
	}		
}
