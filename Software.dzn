component PP2 {
	requires PushIF pushIF;
	requires ConveyIF conveyIF;
	requires LightIF lightIF1;
	requires LightIF lightIF2;
	requires BucketIF bucketIF;
	
	provides Button startpause;
	provides Button abort;
	
/*	behaviour
	{
		
	*/
}

component Pusher {
	provides PushIF pushIF;

	
	behaviour
	{
		enum States {Idle, Running};
		States state = States.Idle;
	
		[state.Idle]{
			on pushIF.startPush(): state = States.Running; // define startPush method
			on pushIF.stopPush(): illegal;
		}
		
		[state.Running] {
			on pushIF.stopPush(): state = States.Idle;
			on pushIF.startPush(): illegal;	
		}	
		
	}
}

component BucketMech {
	provides BucketIF bucketIF;
	
	behaviour {
		enum States {Idle, IdleB, IdleW, RunningB, RunningW, ResetB, ResetW};
		States state = States.Idle;
		
		[state.Idle]{
			on bucketIF.startB():{
				
				state = States.RunningB;
			} 
			on bucketIF.startW(): state = States.RunningW;
			on bucketIF.reset(): illegal;
			on bucketIF.stop(): illegal;
		}
		
		[state.IdleB]{
			on bucketIF.startB(): illegal;
			on bucketIF.startW(): illegal;
			on bucketIF.reset(): state = States.ResetB;
			on bucketIf.stop(): illegal;
		}
		
		[state.IdleW]{
			on bucketIF.startB(): illegal;
			on bucketIF.startW(): illegal;
			on bucketIF.reset(): state = States.ResetW;
			on bucketIf.stop(): illegal;
		}
		
		[state.RunningB]{
			on bucketIF.startB(): illegal;
			on bucketIF.startW(): illegal;
			on bucketIF.reset(): illegal;
			on bucketIF.stop(): state = States.IdleB;
		}
		
		[state.RunningW]{
			on bucketIF.startB(): illegal;
			on bucketIF.startW(): illegal;
			on bucketIF.reset(): illegal;
			on bucketIF.stop(): state = States.IdleW;
		}
		
		[state.ResetB]{
			on bucketIF.startB(): illegal;
			on bucketIF.startW(): illegal;
			on bucketIF.reset(): illegal;
			on bucketIf.stop(): state = States.Idle;
		}
		
		[state.ResetW]{
			on bucketIF.startB(): illegal;
			on bucketIF.startW(): illegal;
			on bucketIF.reset(): illegal;
			on bucketIf.stop(): state = States.Idle;
		}
	}
	
}

component ConveyorB {
	provides ConveyIF conveyIF; 
	
	behaviour
	{
		enum States {Idle, Running};
		States state = States.Idle;
	
		[state.Idle]{
			on conveyIF.startConveyor(): state = States.Running; // define startPush method
			on conveyIF.stopConveyor(): illegal;
		}
		
		[state.Running] {
			on conveyIF.stopConveyor(): state = States.Idle;
			on conveyIF.startConveyor(): illegal;	
		}	
		
	}
}

component LightTr {
	provides LightIF lightIF;
}


interface PushIF {
	
	in void startPush();
	in void stopPush();
}

interface BucketIF {
	
}

interface ConveyIF {
	
	in void startConveyor();
	in void stopConveyor();	
}

interface LightIF{
	
}

interface Button {
	
}