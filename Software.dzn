interface PP2IF
{
	in void startUp();
	in void startStop();
	in void abort();
	
	out void error00();		//Pusher Disconnected
	out void error01();		//PusherBtn Disconnected
	out void error02();		//Disc stuck at tube
	out void error03();		//LED01 malfunction
	out void error04();		//LED02 malfunction
	out void error05();		//Photocell 1 malfunction
	out void error06();		//Conveyor Belt Disconnected
	out void error07();		//Disc stuck in front of Photocell 1
	out void error08();		//Bucket Mechanism Malfunction
	out void error09();		//BucketBtn Disconnected
	out void pause();		
	out void unpause();
	out void aborted();
	out void finished();
	
	behaviour
	{
		enum State {Off, Idle, ToIdle, Push, Scan, MoveWhite, MoveBlack, Aborted};
		State state = State.Off;
		
		[state.ToIdle]{
			on optional:		state = State.Idle;
		}
		
		[state.Idle]{
			on optional:		state = State.Scan;
			on optional:		state = State.Push;
		}
		
		[state.Push]{
			on optional: 		state = State.Idle;
			on optional: 		state = State.Scan;
		}
		
		[state.Scan]{
			on optional:		state = State.MoveWhite;
			on optional:		state = State.MoveBlack;
		}
		
		[state.MoveWhite]{
			on optional:		state = State.Idle;
		}
		
		[state.MoveBlack]{
			on optional:		state = State.Idle;
		}		
		
		on startUp:{
			[state.Off]			state = State.ToIdle;
			[otherwise]			illegal;
		}		
		
		on startStop:
		{
			[state.Idle]		{}
			[state.Scan]		{}
			[state.Push]		{}
			[state.ToIdle]		{}
			[state.MoveWhite]	{}
			[state.MoveBlack]	{}
			[state.Aborted]		{state = State.ToIdle;}
			[otherwise]			illegal;
		}
		on abort:
		{
			[state.Off]			illegal;
			[state.Aborted]		{}
			[otherwise]			{state = State.Aborted;}
		}	
		
	}
	
}

interface SensorIF
{
	in void enable();
	in void disable();
	
	out void triggered();
	out void timeout();
	out void systemCheckDone();
	
	behaviour
	{
		enum State { Disabled, Enabled, Triggered};
		State state = State.Disabled;
		
		[state.Disabled]
		{
			on enable:			state = State.Enabled;
			on disable:			{}
		}
		[state.Enabled]
		{
			on enable:			illegal;
			on disable:			state = State.Disabled;
			on optional:		{triggered; state = State.Triggered;}
			on optional:		{systemCheckDone; state = State.Disabled;}
		}
		[state.Triggered]		//Sensor output = 0!
		{
			on enable:			illegal;
			on disable:			state = State.Disabled;
			on inevitable:		timeout;
		}
		
	}
}

interface ColourDetIF
{
	in void enable();
	in void disable();
	
	out void white();
	out void black();
	out void timeout();
	
	behaviour
	{
		enum State { Disabled, Enabled, Triggered };
		State state = State.Disabled;
		
		[state.Disabled]
		{
			on enable:			state = State.Enabled;
			on disable:			{}
		}
		[state.Enabled]
		{
			on enable:			illegal;
			on disable:			state = State.Disabled;
			on optional:		{black;state = State.Triggered;}
			on optional:		{white;state = State.Triggered;}
			
		}
		[state.Triggered]
		{
			on enable:			illegal;
			on disable:			{state = State.Disabled;}
			on inevitable:		{timeout;}
		}
	}
}

interface MotorIF
{
	in void turnCW();
	in void turnCCW();
	in void disable();
	
	out void turningCW();
	out void turningCCW();
	out void disabled();
	
	behaviour
	{
		enum State { Disabled, TurnCW, TurnCCW, Disabling};
		State state = State.Disabled;
		
		on turnCW:
		{
			[state.Disabled]	{turningCW;state = State.TurnCW;}
			[otherwise]			{illegal;}
		}
		on turnCCW:
		{
			[state.Disabled]	{turningCCW;state = State.TurnCCW;}
			[otherwise]			{illegal;}
		}
		on disable:
		{
			[state.TurnCW]		{disabled;state = State.Disabled;}
			[state.TurnCCW]		{disabled;state = State.Disabled;}
			[otherwise]			{}
		}
	}
}

interface ButtonIF {
	
	in void pressed();
	in void notPressed();
	in void enable();
	in void disable();
	
	out void pressing();
	out void notPressing();
	out void timeoutP();
	out void timeoutNP();
	
	behaviour {
				
		enum State {Off, Pressed, NotPressed};
		State state = State.Off;
		
		on pressed:
		{
			[state.NotPressed]	{pressing; state = State.Pressed;}
			[state.Pressed]		{}
			[otherwise]			{illegal;}
			
		}
		
		on notPressed:
		{
			[state.Pressed]		{notPressing; state = State.NotPressed;}
			[otherwise]			{}
		}
		
		[state.Off] {
			on enable:			state = State.NotPressed;
			on disable, pressed, notPressed: 	illegal;
		}
		
		[state.Pressed] {
			on inevitable:		timeoutP;
			on disable:			state = State.Off;
		}
		
		[state.NotPressed] {
			on inevitable:		timeoutNP;
			on disable:			state = State.Off;
		}
		
	}	
}

component BucketSort
{
	provides PP2IF pp2;
	requires SensorIF sensor1;
	requires SensorIF sensor2;
	requires ColourDetIF colourDet1;
	requires ColourDetIF colourDet2;
	requires MotorIF motorPush;
	requires MotorIF motorConveyor;
	requires MotorIF motorBucket;
	requires ButtonIF buttonPush;
	requires ButtonIF buttonBucket;
	
	behaviour {
		
		enum State {Off, SystemCheck, Idle, PushingButtonPressed, 
			PushingButtonNotPressed, Scanning1, MoveWhite, 
			MoveBlack, IdleWhite, IdleBlack, MoveWhiteBack,
			MoveBlackBack, Aborted};
		State state = State.Off;
		bool paused = true;
		
		[state.Off] {
			on pp2.startUp():				{sensor1.enable(); sensor2.enable();  state = State.SystemCheck;}				
			on pp2.startStop():				{}
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}
		
		[state.SystemCheck] {
			on pp2.startUp():				{}				
			on pp2.startStop():				{}
			on sensor1.triggered():			{pp2.error02(); sensor1.disable(); sensor2.disable(); state = State.Aborted;}
			on sensor1.timeout():			illegal;
			on sensor1.systemCheckDone():	{sensor1.disable(); sensor2.disable(); state = State.Idle;}
			on sensor2.triggered():			{pp2.error03(); sensor1.disable(); sensor2.disable(); state = State.Aborted;}
			on sensor2.timeout():			illegal;
			on sensor2.systemCheckDone():	{sensor1.disable(); sensor2.disable(); state = State.Idle;}
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;			
		}	
		
		[state.Idle] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				{
				[paused]				{buttonPush.enable(); motorPush.turnCW(); colourDet1.enable(); state = State.PushingButtonNotPressed;}
				[otherwise]				{paused=true;}
				
			}
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
	
		[state.PushingButtonNotPressed] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		{state = State.PushingButtonPressed;}
			on buttonPush.notPressing():	{}
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		{pp2.error01(); state = State.Aborted;}
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.PushingButtonPressed] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			illegal;
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			illegal;
			on colourDet1.white():			illegal;
			on colourDet1.black():			illegal;
			on colourDet1.timeout():		illegal;
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		{}
			on buttonPush.notPressing():	{state = State.Scanning1;}
			on buttonPush.timeoutP():		{pp2.error00(); state = State.Aborted;}
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
	
		[state.Scanning1] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			{pp2.error00(); state = State.Aborted;}
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			{pp2.error06(); state = State.Aborted;}
			on colourDet1.white():			{motorBucket.turnCW(); buttonBucket.enable(); colourDet1.disable(); colourDet2.enable(); state = State.MoveWhite;}
			on colourDet1.black():			{motorBucket.turnCCW(); buttonBucket.enable(); colourDet1.disable(); colourDet2.enable(); state = State.MoveBlack;}
			on colourDet1.timeout():		{pp2.error05(); state = State.Aborted;}
			on colourDet2.white():			illegal;
			on colourDet2.black():			illegal;
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	illegal;
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.MoveWhite] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			{pp2.error00(); state = State.Aborted;}
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			{pp2.error06(); state = State.Aborted;}
			on colourDet1.white():			{}
			on colourDet1.black():			{}
			on colourDet1.timeout():		{pp2.error05(); state = State.Aborted;}
			on colourDet2.white():			{}
			on colourDet2.black():			{}
			on colourDet2.timeout():		illegal;
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		{}
			on motorBucket.turningCCW():	illegal;
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		{colourDet2.disable(); motorBucket.disable(); state = State.IdleWhite;}
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.MoveBlack] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			{pp2.error00(); state = State.Aborted;}
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			{pp2.error06(); state = State.Aborted;}
			on colourDet1.white():			{}
			on colourDet1.black():			{}
			on colourDet1.timeout():		{pp2.error05(); state = State.Aborted;}
			on colourDet2.white():			{pp2.error05(); state = State.Aborted;}
			on colourDet2.black():			{}
			on colourDet2.timeout():		{}
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	{}
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		{colourDet2.disable(); motorBucket.disable(); state = State.IdleBlack;}
			on buttonBucket.notPressing():	{}	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.IdleWhite] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			{pp2.error00(); state = State.Aborted;}
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			{pp2.error06(); state = State.Aborted;}
			on colourDet1.white():			{}
			on colourDet1.black():			{}
			on colourDet1.timeout():		{pp2.error05(); state = State.Aborted;}
			on colourDet2.white():			{pp2.error05(); state = State.Aborted;}
			on colourDet2.black():			{}
			on colourDet2.timeout():		{}
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	{}
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	illegal;
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		{motorBucket.turnCCW(); state = State.MoveWhiteBack;}
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.IdleBlack] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			{pp2.error00(); state = State.Aborted;}
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			{pp2.error06(); state = State.Aborted;}
			on colourDet1.white():			{}
			on colourDet1.black():			{}
			on colourDet1.timeout():		{pp2.error05(); state = State.Aborted;}
			on colourDet2.white():			{pp2.error05(); state = State.Aborted;}
			on colourDet2.black():			{}
			on colourDet2.timeout():		{}
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	{}
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	{}
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	illegal;	
			on buttonBucket.timeoutP():		{motorBucket.turnCW(); state = State.MoveBlackBack;}
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.MoveWhiteBack] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			{pp2.error00(); state = State.Aborted;}
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			{pp2.error06(); state = State.Aborted;}
			on colourDet1.white():			{}
			on colourDet1.black():			{}
			on colourDet1.timeout():		{pp2.error05(); state = State.Aborted;}
			on colourDet2.white():			{pp2.error05(); state = State.Aborted;}
			on colourDet2.black():			{}
			on colourDet2.timeout():		{}
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	{}
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	{}
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	{motorPush.turnCW(); state = State.PushingButtonNotPressed;}	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		[state.MoveBlackBack] {
			on pp2.startUp():				illegal;				
			on pp2.startStop():				paused = true;
			on sensor1.triggered():			illegal;
			on sensor1.timeout():			{pp2.error00(); state = State.Aborted;}
			on sensor2.triggered():			illegal;
			on sensor2.timeout():			{pp2.error06(); state = State.Aborted;}
			on colourDet1.white():			{}
			on colourDet1.black():			{}
			on colourDet1.timeout():		{pp2.error05(); state = State.Aborted;}
			on colourDet2.white():			{pp2.error05(); state = State.Aborted;}
			on colourDet2.black():			{}
			on colourDet2.timeout():		{}
			on motorPush.turningCW():		illegal;
			on motorPush.turningCCW():		illegal;
			on motorPush.disabled():		illegal;
			on motorConveyor.turningCW():	{}
			on motorConveyor.disabled():	illegal;
			on motorBucket.turningCW():		illegal;
			on motorBucket.turningCCW():	{}
			on motorBucket.disabled():		illegal;
			on buttonPush.pressing():		illegal;
			on buttonPush.notPressing():	{}
			on buttonPush.timeoutP():		illegal;
			on buttonPush.timeoutNP():		illegal;
			on buttonBucket.pressing():		illegal;
			on buttonBucket.notPressing():	{motorPush.turnCW(); state = State.PushingButtonNotPressed;}	
			on buttonBucket.timeoutP():		illegal;
			on buttonBucket.timeoutNP():	illegal;
		}	
		
		
		
		
		
		
		on pp2.abort():
		{
			[state.Off]					illegal;
			[state.Aborted]				{}
			[otherwise]					{state = State.Aborted;}
		}
		
	}		
}
